# BRS-GPT: AI-Powered Cybersecurity Analysis Tool
# Company: EasyProTech LLC (www.easypro.tech)
# Dev: Brabus
# Date: 2025-09-15 00:00:00 UTC
# Status: Created
# Telegram: https://t.me/easyprotech

"""
Pentest-as-Code

Executes declarative YAML/JSON scenarios specifying required checks or targets.
Focuses on orchestrating existing modules (recon/tech detector/xss) with guards.

Schema example (YAML):
  target: example.com
  profile: lightning
  require:
    - jwt
    - s3
    - ssh
    - tls

OpenAI-only for AI phases; no external threat APIs.
"""

from __future__ import annotations

from typing import Any, Dict, List, Optional
from pathlib import Path
import json

try:
    import yaml  # type: ignore
except Exception:  # pragma: no cover
    yaml = None  # type: ignore

from .simple_ai_analyzer import SimpleAIAnalyzer
from ..utils.config_manager import ConfigManager


class PentestAsCodeExecutor:
    """Executes simple Pentest-as-Code scenarios."""

    def __init__(self, api_key: str):
        self.api_key = api_key

    def _load_scenario(self, path: str) -> Dict[str, Any]:
        p = Path(path)
        if not p.exists():
            raise FileNotFoundError(path)
        text = p.read_text(encoding="utf-8")
        if p.suffix.lower() in (".yaml", ".yml") and yaml is not None:
            return yaml.safe_load(text) or {}
        return json.loads(text)

    async def run(self, scenario_path: str) -> str:
        """Run scenario and return log path from the analyzer."""
        sc = self._load_scenario(scenario_path)
        target = sc.get("target")
        if not target:
            raise ValueError("scenario.target is required")
        profile = sc.get("profile")
        model_override = sc.get("model")

        cfg = ConfigManager()
        if profile:
            try:
                cfg.apply_profile(profile)
            except Exception:
                pass

        # Use SimpleAIAnalyzer as executor backbone for now
        model = model_override or cfg.get_settings().get("ai", {}).get("model") or "gpt-4o-mini"
        analyzer = SimpleAIAnalyzer(self.api_key, model)

        # Today we run the full simple analysis; future: selective phases from "require"
        log = await analyzer.analyze_domain(target)
        return log


__all__ = ["PentestAsCodeExecutor"]


