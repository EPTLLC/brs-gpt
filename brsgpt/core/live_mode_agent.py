# BRS-GPT: AI-Powered Cybersecurity Analysis Tool
# Company: EasyProTech LLC (www.easypro.tech)
# Dev: Brabus
# Date: 2025-09-15 00:00:00 UTC
# Status: Created
# Telegram: https://t.me/easyprotech

"""
Live-mode Agent

Lightweight continuous monitoring loop optimized for low cost and short cycles.
Runs simplified analyses on a fixed cadence using budget-friendly model/profile.

OpenAI-only; no external threat APIs.
"""

from __future__ import annotations

import asyncio
from typing import Any, Dict, List, Optional

from rich.console import Console

from ..utils.config_manager import ConfigManager
from .simple_ai_analyzer import SimpleAIAnalyzer


class LiveModeAgent:
    """Continuously monitors a target with budgeted AI cycles."""

    def __init__(self, api_key: str):
        self.api_key = api_key
        self.console = Console()

    async def monitor(
        self,
        target: str,
        cycles: int = 3,
        interval_seconds: int = 60,
        profile: Optional[str] = "lightning",
        model_override: Optional[str] = None,
    ) -> List[str]:
        """Run repeated lightweight analyses.

        Args:
            target: target domain or host
            cycles: number of iterations to run (avoid infinite loop by default)
            interval_seconds: sleep between cycles
            profile: scanning profile to apply (defaults to lightning)
            model_override: optional OpenAI model id override

        Returns:
            List of log file paths generated by the analyzer for each cycle
        """

        cfg = ConfigManager()
        if profile:
            try:
                cfg.apply_profile(profile)
            except Exception:
                pass

        # Resolve model: prefer override, otherwise use configured fallback/mini
        settings = cfg.get_settings()
        model = model_override or settings.get("ai", {}).get("fallback_model") or settings.get("ai", {}).get("model") or "gpt-4o-mini"

        self.console.print(
            f"[cyan]Live-mode monitoring[/cyan]: target={target}, cycles={cycles}, interval={interval_seconds}s, model={model}, profile={profile or 'default'}"
        )

        logs: List[str] = []
        for i in range(cycles):
            try:
                self.console.print(f"[green]Cycle {i+1}/{cycles}[/green]: starting...")
                analyzer = SimpleAIAnalyzer(self.api_key, model)
                log = await analyzer.analyze_domain(target)
                logs.append(log)
                self.console.print(f"[green]Cycle {i+1}/{cycles} complete[/green]: {log}")
            except Exception as e:
                self.console.print(f"[red]Live-mode error[/red]: {str(e)}")
            if i < cycles - 1:
                await asyncio.sleep(interval_seconds)

        return logs


__all__ = ["LiveModeAgent"]


