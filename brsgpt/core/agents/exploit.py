import json
from typing import Dict, Any
from .base import BaseAIAgent


class ExploitationAgent(BaseAIAgent):
    """AI agent for exploitation planning and attack path discovery."""

    def __init__(self, api_key: str, settings: Dict[str, Any], cost_tracker: Dict[str, Any] | None = None):
        super().__init__(api_key, settings, "Exploitation", cost_tracker)

    async def plan_exploitations(self, vuln_results: Dict[str, Any], threat_intel: Dict[str, Any]) -> Dict[str, Any]:
        system_prompt = """You are a penetration testing expert. Plan realistic exploitation scenarios based on discovered vulnerabilities. Respond in JSON format."""
        prompt = f"""
Vulnerability results: {json.dumps(vuln_results, indent=2)}
Threat intelligence: {json.dumps(threat_intel, indent=2)}

Plan exploitation scenarios:
{{
    "attack_scenarios": [
        {{
            "scenario_name": "descriptive_name",
            "severity": "low|medium|high|critical",
            "complexity": "low|medium|high",
            "prerequisites": ["required_conditions"],
            "attack_steps": [
                {{
                    "step": number,
                    "action": "detailed_description",
                    "tools_required": ["tool_names"],
                    "success_indicators": ["verification_methods"]
                }}
            ],
            "potential_impact": "impact_description",
            "detection_difficulty": "easy|moderate|difficult",
            "mitigation_priority": "low|medium|high|critical"
        }}
    ],
    "attack_chains": {{
        "multi_stage_attacks": ["chain_descriptions"],
        "privilege_escalation": ["escalation_paths"],
        "lateral_movement": ["movement_opportunities"],
        "data_exfiltration": ["exfiltration_methods"]
    }},
    "defensive_recommendations": {{
        "immediate_actions": ["urgent_fixes"],
        "monitoring_enhancements": ["detection_improvements"],
        "architectural_changes": ["long_term_fixes"]
    }}
}}
"""
        return await self._query_ai(prompt, system_prompt)

    async def generate_pocs(self, confirmed_findings: Dict[str, Any]) -> Dict[str, Any]:
        """Generate safe PoCs (curl/httpie) for confirmed findings where applicable."""
        system_prompt = (
            "You are a penetration tester producing SAFE proof-of-concepts. "
            "Output only non-destructive PoCs (curl/httpie) for confirmed web/API findings (e.g., reflected XSS, open endpoints). "
            "Respond ONLY with JSON."
        )
        prompt = f"""
Confirmed findings: {json.dumps(confirmed_findings, indent=2)}

Return STRICT JSON:
{{
  "pocs": [
    {{
      "ref": "finding_short_ref",
      "title": "short_title",
      "severity": "low|medium|high|critical",
      "command": "curl -i 'https://target/...'",
      "notes": "when to run and what to expect"
    }}
  ]
}}
"""
        return await self._query_ai(prompt, system_prompt)
